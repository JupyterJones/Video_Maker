Jack, here is the complete script with detailed logging and a corrected HTML template to ensure files are listed and can be edited:

Flask Application
python
Copy code
from flask import Flask, request, redirect, url_for, render_template
import os

app = Flask(__name__)

# Define the directory where text files will be stored
TEXT_FILES_DIR = "static/text_files"
if not os.path.exists(TEXT_FILES_DIR):
    os.makedirs(TEXT_FILES_DIR)

# Function to save text to a file
def save_text_to_file(filename, text):
    filepath = os.path.join(TEXT_FILES_DIR, filename)
    with open(filepath, "w") as file:
        file.write(text)
    log_message = f"Text saved to file: {filename}"
    logit(log_message)

# Function to read text from a file
def read_text_from_file(filename):
    filepath = os.path.join(TEXT_FILES_DIR, filename)
    with open(filepath, "r") as file:
        text = file.read()
    log_message = f"Text read from file: {filename}"
    logit(log_message)
    return text

# Function to log messages
def logit(message):
    print(f"[LOG] {message}")

@app.route("/editor", methods=["GET", "POST"])
def editor():
    if request.method == "POST":
        filename = request.form["filename"]
        text = request.form["text"]
        save_text_to_file(filename, text)
        return redirect(url_for("editor"))
    else:
        files = os.listdir(TEXT_FILES_DIR)
        logit("List of files retrieved for editor view")
        return render_template("editor.html", files=files)

@app.route("/edit/<filename>", methods=["GET", "POST"])
def edit(filename):
    if request.method == "POST":
        text = request.form["text"]
        logit(f"Text edited in file: {filename}")
        logit(text)
        save_text_to_file(filename, text)
        return redirect(url_for("editor"))
    else:
        text = read_text_from_file(filename)
        return render_template("edit.html", filename=filename, text=text)

if __name__ == "__main__":
    app.run(debug=True)
templates/edit.html
html
Copy code
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Edit Text File</title>
</head>
<body>
    <h1>Edit Text File - {{ filename }}</h1>
    
    <form action="{{ url_for('edit', filename=filename) }}" method="post">
        <label for="text">Text:</label><br>
        <textarea id="text" name="text" rows="25" cols="120" required>{{ text }}</textarea><br><br>
        <button type="submit">Save Changes</button>
    </form>
</body>
</html>
templates/editor.html
html
Copy code
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Text File Editor</title>
</head>
<body>
    <h1>Text File Editor</h1>

    <h2>Existing Files</h2>
    <ul>
        {% for file in files %}
        <li><a href="{{ url_for('edit', filename=file) }}">{{ file }}</a></li>
        {% endfor %}
    </ul>

    <h2>Create New File</h2>
    <form action="{{ url_for('editor') }}" method="post">
        <label for="filename">Filename:</label><br>
        <input type="text" id="filename" name="filename" required><br><br>
        <label for="text">Text:</label><br>
        <textarea id="text" name="text" rows="20" cols="120" required></textarea><br><br>
        <button type="submit">Save File</button>
    </form>
</body>
</html>
Explanation
Flask Application:

The save_text_to_file and read_text_from_file functions handle file operations and include logging.
The logit function prints log messages to the console.
The /editor route handles displaying the list of files and saving new files.
The /edit/<filename> route handles editing an existing file.
HTML Templates:

edit.html provides a form for editing a specific text file.
editor.html displays a list of existing files and a form for creating a new file.
Logging:

Log messages provide information about file operations and user actions.
This complete script ensures you can view, edit, and create text files with proper logging and no placeholders.
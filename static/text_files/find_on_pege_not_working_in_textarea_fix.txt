
{% extends 'base_.html' %}

{% block title %}Search Results - My Blog{% endblock %}

{% block content %}
<script>
    function findString(str) {
        if (parseInt(navigator.appVersion) < 4) return;

        if (window.find) {
            var strFound = window.find(str);
            if (!strFound) {
                window.find(str, 0, 1);
            }
            if (strFound) {
                var range = window.getSelection().getRangeAt(0);
                var span = document.createElement("span");
                span.style.backgroundColor = "yellow";
                range.surroundContents(span);
            }
        } else if (navigator.appName.indexOf("Microsoft") != -1) {
            // Not implemented for brevity
        } else if (navigator.appName == "Opera") {
            alert("Opera browsers not supported, sorry...");
            return;
        }

        if (!strFound) alert("String '" + str + "' not found!");
    }

    function moveToNextOccurrence() {
        var search_str = document.getElementById("search_input").value;
        findString(search_str);
    }
</script>

<body>
    <h3>Edit Text File - {{ filename }}</h3>
    
    <form action="{{ url_for('edit', filename=filename) }}" method="post">
        <label for="text">Text:</label><br>
        <textarea id="text" name="text" rows="25" cols="60" required>{{ text }}</textarea><br><br>
        <button type="submit">Save Changes</button>
    </form>
    {% endblock %}
</body>
</html>
-----------this searches the page but not the text area when it loads data

ChatGPT
To enable search functionality within a textarea, we need a slightly different approach. The JavaScript window.find function doesn't work inside a textarea because it operates on the visible document, not the content within form elements. Instead, we'll need to manipulate the content of the textarea directly.

Here is the updated script:

Load the content of the textarea into a variable.
Search for the string within this content.
Highlight the occurrences found within the textarea.
Here's the complete script for the HTML template:

html
Copy code
{% extends 'base_.html' %}

{% block title %}Search Results - My Blog{% endblock %}

{% block content %}
<script>
    function findStringInTextarea() {
        var str = document.getElementById("search_input").value;
        var textarea = document.getElementById("text");
        var content = textarea.value;
        var index = content.indexOf(str);
        
        if (index === -1) {
            alert("String '" + str + "' not found!");
            return;
        }

        var before = content.substring(0, index);
        var match = content.substring(index, index + str.length);
        var after = content.substring(index + str.length);

        textarea.value = before + '[[' + match + ']]' + after;

        textarea.focus();
        textarea.selectionStart = before.length;
        textarea.selectionEnd = before.length + match.length + 4; // 4 is the length of '[[' and ']]'
    }

    function moveToNextOccurrence() {
        findStringInTextarea();
    }
</script>

<body>
    <h3>Edit Text File - {{ filename }}</h3>
    
    <form action="{{ url_for('edit', filename=filename) }}" method="post">
        <label for="text">Text:</label><br>
        <textarea id="text" name="text" rows="25" cols="60" required>{{ text }}</textarea><br><br>
        <input type="text" id="search_input" placeholder="Search text...">
        <button type="button" onclick="moveToNextOccurrence()">Find</button>
        <br><br>
        <button type="submit">Save Changes</button>
    </form>
{% endblock %}
</body>
</html>
Explanation:
JavaScript Function:

findStringInTextarea:
Retrieves the search string from the input field.
Searches for the string within the textarea content.
Highlights the found string by surrounding it with [[ and ]].
Sets the textarea selection to the highlighted string.
HTML Structure:

Added an input field (search_input) for the user to type the search string.
Added a button that calls moveToNextOccurrence to initiate the search and highlight process.
This script will highlight the first occurrence of the search string by surrounding it with brackets. You can enhance this by adding logic to move through multiple occurrences or by using a more sophisticated highlighting method if needed.

the first script finds multple occurences, i need that.
ChatGPT
To enhance the script so that it finds and highlights multiple occurrences within the textarea, we can use a more advanced approach. Here, we will use a combination of JavaScript to manipulate the textarea content and regex to find and highlight all occurrences of the search string.

Here's the complete script for your HTML template:

html
Copy code
{% extends 'base_.html' %}

{% block title %}Search Results - My Blog{% endblock %}

{% block content %}
<script>
    function findAndHighlight() {
        var str = document.getElementById("search_input").value;
        var textarea = document.getElementById("text");
        var content = textarea.value;
        var regex = new RegExp('(' + str + ')', 'gi');
        var matches = content.match(regex);
        
        if (!matches) {
            alert("String '" + str + "' not found!");
            return;
        }

        var highlightedContent = content.replace(regex, '[[ $1 ]]');
        textarea.value = highlightedContent;

        var startIndex = content.indexOf(matches[0]);
        textarea.focus();
        textarea.setSelectionRange(startIndex, startIndex + matches[0].length);
    }

    function moveToNextOccurrence() {
        findAndHighlight();
    }
</script>

<body>
    <h3>Edit Text File - {{ filename }}</h3>
    
    <form action="{{ url_for('edit', filename=filename) }}" method="post">
        <label for="text">Text:</label><br>
        <textarea id="text" name="text" rows="25" cols="60" required>{{ text }}</textarea><br><br>
        <input type="text" id="search_input" placeholder="Search text...">
        <button type="button" onclick="moveToNextOccurrence()">Find</button>
        <br><br>
        <button type="submit">Save Changes</button>
    </form>
{% endblock %}
</body>
</html>
Explanation:
JavaScript Function:

findAndHighlight:
Retrieves the search string from the input field.
Uses regex to find all occurrences of the search string within the textarea content.
If no matches are found, an alert is displayed.
Replaces each occurrence of the search string with the highlighted version using [[ and ]].
Highlights the first occurrence by setting the textarea selection range.
HTML Structure:

Added an input field (search_input) for the user to type the search string.
Added a button that calls moveToNextOccurrence to initiate the search and highlight process.
This script will highlight all occurrences of the search string by surrounding them with brackets. The first occurrence is selected to make it easy for the user to see. You can further enhance this by adding logic to move through each highlighted occurrence if needed.

i want to 'jump' to next occurence
ChatGPT
To implement a feature that highlights the next occurrence of the search string in the textarea, we need to maintain the state of the current search position. Hereâ€™s a complete example that includes functionality to highlight and jump to the next occurrence:

html
Copy code
{% extends 'base_.html' %}

{% block title %}Search Results - My Blog{% endblock %}

{% block content %}
<script>
    var currentIndex = 0;
    var matches = [];
    var searchString = '';

    function findAndHighlight() {
        var str = document.getElementById("search_input").value;
        var textarea = document.getElementById("text");
        var content = textarea.value;

        // Check if the search string has changed
        if (str !== searchString) {
            searchString = str;
            currentIndex = 0;
            var regex = new RegExp('(' + str + ')', 'gi');
            matches = [];
            var match;
            while ((match = regex.exec(content)) !== null) {
                matches.push({ index: match.index, length: match[0].length });
            }
        }

        // If no matches found, alert the user
        if (matches.length === 0) {
            alert("String '" + str + "' not found!");
            return;
        }

        // Highlight the next occurrence
        var match = matches[currentIndex];
        var before = content.substring(0, match.index);
        var after = content.substring(match.index + match.length);
        textarea.value = before + '[[' + searchString + ']]' + after;

        // Set the selection range to the highlighted text
        textarea.focus();
        textarea.setSelectionRange(match.index, match.index + searchString.length);

        // Update the current index for the next call
        currentIndex = (currentIndex + 1) % matches.length;
    }

    function moveToNextOccurrence() {
        findAndHighlight();
    }
</script>

<body>
    <h3>Edit Text File - {{ filename }}</h3>
    
    <form action="{{ url_for('edit', filename=filename) }}" method="post">
        <label for="text">Text:</label><br>
        <textarea id="text" name="text" rows="25" cols="60" required>{{ text }}</textarea><br><br>
        <input type="text" id="search_input" placeholder="Search text...">
        <button type="button" onclick="moveToNextOccurrence()">Find Next</button>
        <br><br>
        <button type="submit">Save Changes</button>
    </form>
{% endblock %}
</body>
</html>
Explanation:
JavaScript Variables:

currentIndex: Keeps track of the current search index.
matches: An array to store the positions and lengths of all matches.
searchString: Stores the current search string to detect changes in the input.
JavaScript Function:

findAndHighlight:
Retrieves the search string from the input field.
If the search string has changed, it resets the current index and re-evaluates the matches using a regex.
Finds all occurrences of the search string and stores their positions and lengths in the matches array.
If no matches are found, an alert is displayed.
Highlights the current match by surrounding it with [[ and ]].
Sets the textarea selection range to the highlighted text.
Updates the current index to point to the next match, wrapping around to the beginning if necessary.
HTML Structure:

Added an input field (search_input) for the user to type the search string.
Added a button that calls moveToNextOccurrence to initiate the search and highlight the next occurrence.
This script will highlight the next occurrence of the search string each time the "Find Next" button is clicked, allowing you to cycle through all matches in the textarea.

so, this searches only the textarea or will it search the whole page ? i would prefer the entire page.
ChatGPT
To search and highlight occurrences of a string across the entire page (including within a textarea), we can use a combination of JavaScript and CSS. The strategy involves finding occurrences within the entire document and then scrolling to each match sequentially.

Here's an enhanced version of your template to achieve this:

html
Copy code
{% extends 'base_.html' %}

{% block title %}Search Results - My Blog{% endblock %}

{% block content %}
<style>
    .highlight {
        background-color: yellow;
    }
</style>

<script>
    var currentMatchIndex = 0;
    var matches = [];

    function findAndHighlight(str) {
        // Remove previous highlights
        removeHighlights();

        // Find all text nodes
        var textNodes = [];
        function getTextNodes(node) {
            if (node.nodeType === 3) {
                textNodes.push(node);
            } else {
                for (var child = node.firstChild; child; child = child.nextSibling) {
                    getTextNodes(child);
                }
            }
        }
        getTextNodes(document.body);

        // Highlight occurrences
        matches = [];
        var regex = new RegExp(str, 'gi');
        textNodes.forEach(function(node) {
            var match;
            while ((match = regex.exec(node.nodeValue)) !== null) {
                matches.push({ node: node, index: match.index, length: match[0].length });
            }
        });

        if (matches.length === 0) {
            alert("String '" + str + "' not found!");
            return;
        }

        matches.forEach(function(match) {
            var span = document.createElement('span');
            span.className = 'highlight';
            var start = match.node.splitText(match.index);
            start.splitText(match.length);
            var highlight = start.cloneNode(true);
            span.appendChild(highlight);
            start.parentNode.replaceChild(span, start);
        });
    }

    function removeHighlights() {
        var highlights = document.querySelectorAll('.highlight');
        highlights.forEach(function(span) {
            var parent = span.parentNode;
            parent.replaceChild(span.firstChild, span);
            parent.normalize();
        });
    }

    function moveToNextOccurrence() {
        var searchStr = document.getElementById("search_input").value;
        if (searchStr === "") {
            alert("Please enter a search string.");
            return;
        }

        if (currentMatchIndex === 0) {
            findAndHighlight(searchStr);
        }

        if (matches.length > 0) {
            var match = matches[currentMatchIndex];
            var range = document.createRange();
            var sel = window.getSelection();
            range.setStart(match.node, match.index);
            range.setEnd(match.node, match.index + match.length);
            sel.removeAllRanges();
            sel.addRange(range);

            match.node.parentElement.scrollIntoView({ behavior: "smooth", block: "center" });

            currentMatchIndex = (currentMatchIndex + 1) % matches.length;
        }
    }
</script>

<body>
    <h3>Edit Text File - {{ filename }}</h3>
    
    <form action="{{ url_for('edit', filename=filename) }}" method="post">
        <label for="text">Text:</label><br>
        <textarea id="text" name="text" rows="25" cols="60" required>{{ text }}</textarea><br><br>
        <input type="text" id="search_input" placeholder="Search text...">
        <button type="button" onclick="moveToNextOccurrence()">Find Next</button>
        <br><br>
        <button type="submit">Save Changes</button>
    </form>
{% endblock %}
</body>
</html>
Explanation:
CSS:

Added a .highlight class to style the highlighted text.
JavaScript Functions:

findAndHighlight: Finds all occurrences of the search string within the entire document and highlights them.
removeHighlights: Removes all existing highlights.
moveToNextOccurrence: Initiates the search and highlights process, and moves to the next occurrence each time the button is clicked.
Highlighting and Navigation:

The script finds all text nodes in the document.
It searches each text node for the search string and highlights matches.
It scrolls to the next highlighted match each time the button is clicked.
HTML Structure:

Added an input field (search_input) for the user to type the search string.
Added a button that calls moveToNextOccurrence to initiate the search and highlight the next occurrence.
This script will search for occurrences of the search string across the entire page, including within the textarea, and allow you to jump to each match sequentially.

most this script be on the page or can it be a script.js file and loaded
ChatGPT
Yes, you can certainly move the JavaScript code into a separate script.js file and then include it in your HTML page using a <script> tag. This is a good practice for separating your HTML structure from your JavaScript logic, which makes your code more organized and easier to maintain.

Hereâ€™s how you can do it:

HTML Template (edit.html):
html
Copy code
{% extends 'base_.html' %}

{% block title %}Search Results - My Blog{% endblock %}

{% block content %}
<style>
    .highlight {
        background-color: yellow;
    }
</style>

<body>
    <h3>Edit Text File - {{ filename }}</h3>
    
    <form action="{{ url_for('edit', filename=filename) }}" method="post">
        <label for="text">Text:</label><br>
        <textarea id="text" name="text" rows="25" cols="60" required>{{ text }}</textarea><br><br>
        <input type="text" id="search_input" placeholder="Search text...">
        <button type="button" onclick="moveToNextOccurrence()">Find Next</button>
        <br><br>
        <button type="submit">Save Changes</button>
    </form>

    <script src="{{ url_for('static', filename='script.js') }}"></script>
</body>
</html>
script.js File:
Create a new file named script.js and save it in your Flask application's static folder (assuming you have a folder named static for serving static files).

javascript
Copy code
// script.js

var currentMatchIndex = 0;
var matches = [];

function findAndHighlight(str) {
    // Remove previous highlights
    removeHighlights();

    // Find all text nodes
    var textNodes = [];
    function getTextNodes(node) {
        if (node.nodeType === 3) {
            textNodes.push(node);
        } else {
            for (var child = node.firstChild; child; child = child.nextSibling) {
                getTextNodes(child);
            }
        }
    }
    getTextNodes(document.body);

    // Highlight occurrences
    matches = [];
    var regex = new RegExp(str, 'gi');
    textNodes.forEach(function(node) {
        var match;
        while ((match = regex.exec(node.nodeValue)) !== null) {
            matches.push({ node: node, index: match.index, length: match[0].length });
        }
    });

    if (matches.length === 0) {
        alert("String '" + str + "' not found!");
        return;
    }

    matches.forEach(function(match) {
        var span = document.createElement('span');
        span.className = 'highlight';
        var start = match.node.splitText(match.index);
        start.splitText(match.length);
        var highlight = start.cloneNode(true);
        span.appendChild(highlight);
        start.parentNode.replaceChild(span, start);
    });
}

function removeHighlights() {
    var highlights = document.querySelectorAll('.highlight');
    highlights.forEach(function(span) {
        var parent = span.parentNode;
        parent.replaceChild(span.firstChild, span);
        parent.normalize();
    });
}

function moveToNextOccurrence() {
    var searchStr = document.getElementById("search_input").value;
    if (searchStr === "") {
        alert("Please enter a search string.");
        return;
    }

    if (currentMatchIndex === 0) {
        findAndHighlight(searchStr);
    }

    if (matches.length > 0) {
        var match = matches[currentMatchIndex];
        var range = document.createRange();
        var sel = window.getSelection();
        range.setStart(match.node, match.index);
        range.setEnd(match.node, match.index + match.length);
        sel.removeAllRanges();
        sel.addRange(range);

        match.node.parentElement.scrollIntoView({ behavior: "smooth", block: "center" });

        currentMatchIndex = (currentMatchIndex + 1) % matches.length;
    }
}
Explanation:
HTML Template:

The HTML structure remains the same, but the <script> tag for loading script.js is added at the end of the body. This ensures that all DOM elements are available before executing the JavaScript code.
script.js File:

This file contains the entire JavaScript code for finding and highlighting occurrences of the search string across the entire page.
It defines functions like findAndHighlight, removeHighlights, and moveToNextOccurrence.
These functions manipulate the DOM and handle user interactions based on the search input.
By separating your JavaScript into a separate file (script.js), you keep your HTML clean and maintainable. Ensure that your Flask application serves the script.js file correctly from the static folder using the appropriate route or URL path ({{ url_for('static', filename='script.js') }}). This approach also promotes code reusability and better organization in larger applications.


9/9